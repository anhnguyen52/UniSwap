const Advertisement = require("../models/AdvertisementModel");
const Wallet = require("../models/WalletModel");
const Transaction = require('../models/TransactionModel');
// 1. User g·ª≠i y√™u c·∫ßu
exports.createAd = async (req, res) => {
  try {
    const { userId, imageUrl, link, position, price, startDate, durationDays } =
      req.body;

    // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ qu·∫£ng c√°o ho·∫°t ƒë·ªông ch∆∞a
    const existing = await Advertisement.findOne({
      user: userId,
      status: "approved",
      expiresAt: { $gt: new Date() },
    });

    if (existing) {
      return res
        .status(400)
        .json({ message: "‚ö†Ô∏è B·∫°n ƒëang c√≥ qu·∫£ng c√°o ƒëang ho·∫°t ƒë·ªông." });
    }

    // T·∫°o qu·∫£ng c√°o m·ªõi
    const start = new Date(startDate);
    const end = new Date(start.getTime() + durationDays * 86400000);

    const ad = new Advertisement({
      user: userId,
      imageUrl,
      link,
      position,
      price,
      startDate: start,
      duration: durationDays,
      endDate: end,
      status: "pending",
    });

    await ad.save();
    res.status(201).json({ message: "‚úÖ G·ª≠i y√™u c·∫ßu th√†nh c√¥ng", ad });
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o qu·∫£ng c√°o:", err);
    res.status(500).json({ error: err.message });
  }
};

// 2. Admin duy·ªát
exports.approveAd = async (req, res) => {
  try {
    const ad = await Advertisement.findById(req.params.id).populate("user");
    if (!ad || ad.status !== "pending") {
      return res.status(400).json({ message: "Kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ x·ª≠ l√Ω" });
    }

    const wallet = await Wallet.findOne({ user: ad.user._id });
    if (!wallet || wallet.balance < ad.price) {
      return res.status(400).json({ message: "Kh√¥ng ƒë·ªß ti·ªÅn" });
    }

    // Tr·ª´ ti·ªÅn
    wallet.balance -= ad.price;
    await wallet.save();

    // ‚úÖ Ghi l·ªãch s·ª≠ giao d·ªãch
    await Transaction.create({
      wallet: wallet._id,
      type: 'purchase',
      amount: ad.price,
      balanceAfter: wallet.balance,
      description: 'Mua qu·∫£ng c√°o'
    });

    // Duy·ªát qu·∫£ng c√°o
    ad.status = "approved";
    ad.expiresAt = ad.endDate;
    await ad.save();

    // ‚ùó T·ª± ƒë·ªông t·ª´ ch·ªëi c√°c qu·∫£ng c√°o kh√°c c·ªßa user c√≤n pending
    await Advertisement.updateMany(
      { _id: { $ne: ad._id }, user: ad.user._id, status: "pending" },
      { $set: { status: "rejected" } }
    );

    res.json({ message: "‚úÖ Duy·ªát th√†nh c√¥ng v√† ƒë√£ tr·ª´ ti·ªÅn + ghi giao d·ªãch", ad });
  } catch (err) {
    console.error("‚ùå L·ªói approveAd:", err);
    res.status(500).json({ error: err.message });
  }
};



// 3. Get danh s√°ch ƒë√£ duy·ªát (hi·ªán t·∫°i ƒëang ch·∫°y)
exports.getApprovedAds = async (req, res) => {
  try {
    const ads = await Advertisement.find({
      status: "approved",
      expiresAt: { $gt: new Date() },
    }).sort({ createdAt: -1 });
    res.json(ads);
  } catch (err) {
    console.error("‚ùå L·ªói getApprovedAds:", err);
    res.status(500).json({ error: err.message });
  }
};

// 4. Get pending (ch·ªù duy·ªát)
exports.getPendingAds = async (req, res) => {
  try {
    const ads = await Advertisement.find({ status: "pending" }).sort({
      createdAt: -1,
    });
    res.json(ads);
  } catch (err) {
    console.error("‚ùå L·ªói getPendingAds:", err);
    res.status(500).json({ error: err.message });
  }
};

// 5. D√πng cho cronjob ‚Üí t·ª± ƒë·ªông h·∫øt h·∫°n
exports.expireAds = async () => {
  try {
    const now = new Date();
    const result = await Advertisement.updateMany(
      { status: "approved", expiresAt: { $lte: now } },
      { status: "expired" }
    );
  } catch (err) {
    console.error("‚ùå L·ªói expireAds cronjob:", err);
  }
};

// 6. Get ads c·ªßa user (My Ads) ‚Üí ƒë·ªÉ user xem tr·∫°ng th√°i
exports.getMyAds = async (req, res) => {
  try {
    const { userId } = req.query;
    if (!userId) {
      return res.status(400).json({ message: "Thi·∫øu userId" });
    }

    const ads = await Advertisement.find({ user: userId }).sort({
      createdAt: -1,
    });
    res.json(ads);
  } catch (err) {
    console.error("‚ùå L·ªói getMyAds:", err);
    res.status(500).json({ error: err.message });
  }
};

exports.rejectAd = async (req, res) => {
  try {
    const ad = await Advertisement.findById(req.params.id);

    if (!ad || ad.status !== "pending") {
      return res.status(400).json({ message: "Kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ x·ª≠ l√Ω" });
    }

    ad.status = "rejected";
    await ad.save();

    res.json({ message: "‚ùå ƒê√£ t·ª´ ch·ªëi qu·∫£ng c√°o", ad });
  } catch (err) {
    console.error("‚ùå L·ªói rejectAd:", err);
    res.status(500).json({ error: err.message });
  }
};

exports.checkHasActiveAd = async (req, res) => {
  try {
    const { userId } = req.params;

    const hasAd = await Advertisement.exists({
      user: userId,
      status: { $in: ['approved', 'active'] }, // n·∫øu b·∫°n d√πng status kh√°c, ƒëi·ªÅu ch·ªânh t·∫°i ƒë√¢y
      endDate: { $gt: new Date() } // v·∫´n c√≤n hi·ªáu l·ª±c
    });

    res.json({ hasActiveAd: !!hasAd });
  } catch (err) {
    console.error('‚ùå L·ªói checkHasActiveAd:', err);
    res.status(500).json({ error: err.message });
  }
};

exports.getActiveAdvertisements = async (req, res) => {
  try {
    const now = new Date();

    // B∆∞·ªõc 1: c·∫≠p nh·∫≠t c√°c qu·∫£ng c√°o ƒë√£ ƒë∆∞·ª£c approved v√† ƒë·∫øn ng√†y b·∫Øt ƒë·∫ßu th√†nh active
    await Advertisement.updateMany(
      {
        status: 'approved',
        startDate: { $lte: now },
        endDate: { $gte: now }
      },
      { $set: { status: 'active' } }
    );

    // B∆∞·ªõc 2: l·∫•y t·∫•t c·∫£ qu·∫£ng c√°o ƒëang active
    const activeAds = await Advertisement.find({
      status: 'active',
      endDate: { $gte: now }
    }).sort({ startDate: 1 });

    res.json(activeAds);
  } catch (err) {
    console.error('‚ùå L·ªói getActiveAdvertisements:', err);
    res.status(500).json({ error: err.message });
  }
};

// 7. ƒê·∫øm s·ªë qu·∫£ng c√°o active theo v·ªã tr√≠
exports.getAdCountByPosition = async (req, res) => {
  try {
    const { position } = req.query;
    if (!position) {
      return res.status(400).json({ message: "Thi·∫øu v·ªã tr√≠ (position)" });
    }

    const count = await Advertisement.countDocuments({
      position,
      status: { $in: ["approved", "active"] },
      endDate: { $gt: new Date() } // v·∫´n c√≤n hi·ªáu l·ª±c
    });

    res.json({ count });
  } catch (err) {
    console.error("‚ùå L·ªói getAdCountByPosition:", err);
    res.status(500).json({ error: err.message });
  }
};

// 8. X√≥a qu·∫£ng c√°o (ch·ªâ cho ph√©p x√≥a n·∫øu ƒëang l√† pending)
exports.deleteAd = async (req, res) => {
  try {
    const ad = await Advertisement.findById(req.params.id);

    if (!ad) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£ng c√°o" });
    }

    if (ad.status !== "pending") {
      return res.status(400).json({ message: "Ch·ªâ c√≥ th·ªÉ x√≥a qu·∫£ng c√°o ƒëang ch·ªù duy·ªát (pending)" });
    }

    await Advertisement.findByIdAndDelete(req.params.id);
    res.json({ message: "üóëÔ∏è ƒê√£ x√≥a qu·∫£ng c√°o th√†nh c√¥ng" });
  } catch (err) {
    console.error("‚ùå L·ªói deleteAd:", err);
    res.status(500).json({ error: err.message });
  }
};


// 9. C·∫≠p nh·∫≠t qu·∫£ng c√°o (ch·ªâ cho s·ª≠a n·∫øu status === pending)
exports.updateAd = async (req, res) => {
  try {
    const { id } = req.params;
    const { imageUrl, link } = req.body;

    const ad = await Advertisement.findById(id);
    if (!ad) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y qu·∫£ng c√°o" });
    }

    if (imageUrl) ad.imageUrl = imageUrl;
    if (link) ad.link = link;

    await ad.save();
    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t qu·∫£ng c√°o th√†nh c√¥ng", ad });
  } catch (err) {
    console.error("‚ùå L·ªói updateAd:", err);
    res.status(500).json({ error: err.message });
  }
};




